Test Plan:
	1.Dependence Testing
        2.Infrastructure Testing
	3.Application testing

Dependence Testing
	- Case1: Check go lang installated
	- Case2: Find where go lang installed 
	- Case3: Check docker installed 
	- Case4: Check docker version
	- Case5: Check docker compose installed  or not
	- Case6: Check Node installed & Version
	- Case7: Check list of docker images
	- Case8: Check Instance Details
	- Case9: Check ENV variables
	- Case10: Check peer version
	- Case11: Check running docker images
	- Case11: Check all docker images

Infrastructure Test Cases:
	- Case1: Get all the channels for given peer
	- Case2: Get transccation details
	- Case3: Get channel
	- Case4: List of peer
	- Case5: Get ca object list
	- Case6: Get peer object list
	- Case7: Get orderer object list
	- Case8: Number of orgs in channels
	- Case9: List for channels
	- Case10: Instantiates the chaincode 
			Syntax: peer chaincode instantiate -n mycc -v 0 -c '{"Args":["init","a","100","b","200"]}' -o 127.0.0.1:7050 -C ch1
	- Case11: Invoke the chaincode over the channel.
			Syntax: peer chaincode invoke -n Descriptionmycc -c '{"Args":["invoke","a","b","10"]}' -o 127.0.0.1:7050 -C ch1
	- Case12: Query the chaincode on the channel.
			Syntax: peer chaincode query -n mycc -c '{"Args":["query","a"]}' -o 127.0.0.1:7050 -C ch1
	- Case13: Issue on creation of channel
	- Case14: Error - chaincode exists - upgrade a chaincode  after modification
	- Case15: Error happened when I instantiate my chaincode:
	- Case16: Install chain code using NodeSdk 
	- Case17: Install farbric for the first time(KeyMaterial not found in SigningIdentityInfo)
			Solution : ./byfn.sh -m down`
	- Case18: Check the logs for the CLI docker container.
			Solution : docker logs -f cli
	- Case19: view chaincode logs
			Solution : docker logs dev-peer0.org2.example.com-mycc-1.0

Application testing
	- Case10: New chaincode Instantiates
			Syntax: peer chaincode instantiate -n mycc -v 0 -c '{"Args":["init","a","100","b","200"]}' -o 127.0.0.1:7050 -C ch1
	- Case11: New chaincode Invoke 
			Syntax: peer chaincode invoke -n Descriptionmycc -c '{"Args":["invoke","a","b","10"]}' -o 127.0.0.1:7050 -C ch1
	- Case12: New chaincode Query
			Syntax: peer chaincode query -n mycc -c '{"Args":["query","a"]}' -o 127.0.0.1:7050 -C ch1
Scripts:
	gcc --version
	pgrep -a docker
	docker ps -a
	go version
	docker version
	docker info
	docker-compose version
	node -v	
	docker images
	env
	cat /etc/lsb-release /etc/os-release
	docker ps 
	docker ps 

# Create the channel
docker exec -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c mychannel -f /etc/hyperledger/configtx/channel.tx
# Join peer0.org1.example.com to the channel.
docker exec -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel join -b mychannel.block

TO DO:
	1.Start fresh permisioned network
	2.Register client to peer
	3.Init chaincode on peer
	4.Invoke chaincode
	5.modify data on peer
	6.check log in peer
	7.query Chaincode
		Input : peer, channelName, chaincodeName, org_name
	8.get Block By Number
		Input : peer, channelName, blockNumber, org_name
	9.get Transaction By ID
		Input : peer, channelName, trxnID, org_name
	10.get Block By Hash
		Input : peer, channelName, hash, org_name
	11.get Chain Info
		Input : peer, channelName, org_name
	12.get Installed Chaincodes
		Input : peer, channelName, org_name
	13.get Channels
		Input : peer,org_name
